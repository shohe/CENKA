package jp.ac.hal.tokyo.cenka.controller;

import java.io.*;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.NamingException;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.itextpdf.text.List;

import jp.ac.hal.tokyo.cenka.beans.CustomerCompanyBean;
import jp.ac.hal.tokyo.cenka.beans.CustomerIndividualBeanl;
import jp.ac.hal.tokyo.cenka.beans.OrderBean;
import jp.ac.hal.tokyo.cenka.constant.SSCORE;
import jp.ac.hal.tokyo.cenka.dao.CustomerCompanyDao;
import jp.ac.hal.tokyo.cenka.dao.CustomerIndividualDao;
import jp.ac.hal.tokyo.cenka.dao.OrderDao;
import jp.ac.hal.tokyo.cenka.dao.SalesDao;

/**
 * Servlet implementation class SaleController
 */
@WebServlet("/sale/*")
public class SaleController extends RootController {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see RootController#RootController()
     */
    public SaleController() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {		
		//* session check
		SessionContoller sessionContoller = new SessionContoller();
		String sessionId = sessionContoller.getSession(request, response);
		sessionContoller.checkSession(sessionId, request, response);
		
		// アクションを振り分ける
		this.action = sortingAction(request);
		if(this.action == null || this.action.equals("index")) {
			action_index(request, response);
		} else if(this.action.equals("order")) {
			action_order(request, response);
		} else if(this.action.equals("order_list")) {
			action_order_list(request, response);
		} else if(this.action.equals("order_input")) {
			action_order_input(request, response);
		} else if(this.action.equals("order_product")) {
			action_order_product(request, response);
		} else if(this.action.equals("stock_list")) {
			action_stock_list(request, response);
		} else if(this.action.equals("pdf")) {
			action_pdf(request, response);
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}
	
	/**
	 * ログイン処理
	 * @throws IOException 
	 * @throws ServletException 
	 */
	@Override
	public void action_index(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		super.action_index(request, response);
		
		// DAO
		OrderDao dao = null;
		CustomerCompanyDao ccDao = null;
		CustomerIndividualDao ciDao = null;
		try {
			dao = new OrderDao();
			ccDao = new CustomerCompanyDao();
			ciDao = new CustomerIndividualDao();
			ArrayList<OrderBean> daoList = new ArrayList<OrderBean>();
			daoList = (ArrayList<OrderBean>) dao.findAll();
			
			for (OrderBean order : daoList) {
				
				// 個人
				if (order.getCompany_id().equals("-1")) {
					order.setCompany_name(ciDao.findByIndividualId(order.getIndividual_id()).getIndividual_name());
				} 
				// 企業
				else {
					order.setCompany_name(ccDao.findByCompanyId(order.getCompany_id()).getCompany_name());
				}

			}
			
			request.setAttribute("orderData", daoList);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (NamingException e) {
			e.printStackTrace();
		} finally {
			try {
				if (dao != null) {
					dao.close();
					ccDao.close();
					ciDao.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				//jspName = "/WEB-INF/jsp/error.jsp";
			}
		}
		
		this.jsp = SSCORE.SALE_INDEX_JSP;
		RequestDispatcher dispatcher = request.getRequestDispatcher(this.jsp);
		dispatcher.forward(request, response);
	}
	
	/**
	 * 商品受注（手入力画面）
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void action_order(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		//* session check
				SessionContoller sessionContoller = new SessionContoller();
				String sessionId = sessionContoller.getSession(request, response);
				sessionContoller.checkSession(sessionId, request, response);
//		request.setAttribute("order_input", 0);
//		request.setAttribute("E_inc_name", " ");
//		request.setAttribute("E_inc_name_kana", " ");
//		request.setAttribute("E_address", " ");
//		request.setAttribute("E_zipcode", " ");
//		request.setAttribute("E_tel_code", " ");
//		request.setAttribute("E_mail", " ");
		System.out.println("---");
		this.jsp = SSCORE.SALE_ORDER_JSP;
		RequestDispatcher dispatcher = request.getRequestDispatcher(this.jsp);
		dispatcher.forward(request, response);
	}
	
	/**
	 * 商品受注画面でボタンを押した時に呼ばれます。
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void action_order_input(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		// 入力値
		String has_error = "has-error"; 
		String inc_name = new String(request.getParameter("inc-name").getBytes("ISO-8859-1"), "UTF-8");
		String inc_name_kana = new String(request.getParameter("inc-name-kana").getBytes("ISO-8859-1"), "UTF-8");
		String address = new String(request.getParameter("address").getBytes("ISO-8859-1"), "UTF-8");
		String zipcode = request.getParameter("zipcode");
		String tel_code = request.getParameter("tel-code");
		String mail = request.getParameter("mail");
		
		if(inc_name.isEmpty()) {
			inc_name = "";
			request.setAttribute("E_inc_name", has_error);
		}
		if(inc_name_kana.isEmpty()) {
			inc_name_kana = "";
			request.setAttribute("E_inc_name_kana", has_error);
		}
		if(address.isEmpty()) {
			address = "";
			request.setAttribute("E_address", has_error);
		}
		if(zipcode.isEmpty()) {
			zipcode = "";
			request.setAttribute("E_zipcode", has_error);
		}
		if(tel_code.isEmpty()) {
			tel_code = "";
			request.setAttribute("E_tel_code", has_error);
		}
		if(mail.isEmpty()) {
			mail = "";
			request.setAttribute("E_mail", has_error);
		}
		
		request.setAttribute("order_input", "input");
		request.setAttribute("inc_name", inc_name);
		request.setAttribute("inc_name_kana", inc_name_kana);
		request.setAttribute("address", address);
		request.setAttribute("zipcode", zipcode);
		request.setAttribute("tel_code", tel_code);
		request.setAttribute("mail", mail);
		
		if (inc_name.isEmpty() || inc_name_kana.isEmpty() ||
				address.isEmpty() || zipcode.isEmpty() || 
				tel_code.isEmpty() || mail.isEmpty()) {
			
			// 未入力があるときはそのまま
			this.jsp = SSCORE.SALE_ORDER_JSP;
			RequestDispatcher dispatcher = request.getRequestDispatcher(this.jsp);
			dispatcher.forward(request, response);
			
		} else {
			
			// 未入力がないときはページ遷移する
			// バーコードの操作をココでする
			String bcd = new String(request.getParameter("bcd").getBytes("ISO-8859-1"), "UTF-8");
			if (!bcd.isEmpty() && bcd != null) {
				try{
					File file = new File(getServletContext().getRealPath("/json/bcd.json"));
				    if (file.isFile() && file.canWrite()) {
				    	System.out.println("-");
				    	FileWriter filewriter = new FileWriter(file);
				        filewriter.write("test");
				        filewriter.close();
				     } else {
				       System.out.println("ファイルに書き込めません");
				     }
				 } catch(IOException e) {
					 System.out.println(e);
				 }
			}
			
			this.jsp = SSCORE.SALE_ORDER_PRODUCT_JSP;
			RequestDispatcher dispatcher = request.getRequestDispatcher(this.jsp);
			dispatcher.forward(request, response);
			
		}
	}
	
	/**
	 * 受注商品入力画面
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void action_order_product(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		
		this.jsp = SSCORE.SALE_ORDER_PRODUCT_JSP;
		RequestDispatcher dispatcher = request.getRequestDispatcher(this.jsp);
		dispatcher.forward(request, response);
	}
	
	
	
	/**
	 * 受注リスト表示
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void action_order_list(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		// 値受け渡し用
//		String vendor = new String(request.getParameter("name").getBytes("ISO-8859-1"), "UTF-8");
//		String price = new String(request.getParameter("price").getBytes("ISO-8859-1"), "UTF-8");
//		String date = new String(request.getParameter("date").getBytes("ISO-8859-1"), "UTF-8");
//		request.setAttribute("vendor", vendor);
//		request.setAttribute("price", price);
//		request.setAttribute("date", date);

		this.jsp = SSCORE.SALE_ORDER_LIST_JSP;
		RequestDispatcher dispatcher = request.getRequestDispatcher(this.jsp);
		dispatcher.forward(request, response);
	}
	
	/**
	 * 在庫リスト表示
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void action_stock_list(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		
		this.jsp = SSCORE.SALE_STOCK_LIST_JSP;
		RequestDispatcher dispatcher = request.getRequestDispatcher(this.jsp);
		dispatcher.forward(request, response);
	}
	
	
	/**
	 * PDF振り分け
	 * @param request
	 * @param response
	 * @throws ServletException
	 * @throws IOException
	 */
	public void action_pdf(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		
		// 値受け渡し準備
		String company_name = new String(request.getParameter("company_name").getBytes("ISO-8859-1"), "UTF-8");
		String zip_code = new String(request.getParameter("zip_code").getBytes("ISO-8859-1"), "UTF-8");
		String address = new String(request.getParameter("address").getBytes("ISO-8859-1"), "UTF-8");
		String address2 = new String(request.getParameter("address2").getBytes("ISO-8859-1"), "UTF-8");
		String department = new String(request.getParameter("department").getBytes("ISO-8859-1"), "UTF-8");
		String charge = new String(request.getParameter("charge").getBytes("ISO-8859-1"), "UTF-8");
		String person_name = new String(request.getParameter("person_name").getBytes("ISO-8859-1"), "UTF-8");
		String order = new String(request.getParameter("order").getBytes("ISO-8859-1"), "UTF-8");
		String issue = new String(request.getParameter("issue").getBytes("ISO-8859-1"), "UTF-8");
		String item = new String(request.getParameter("item").getBytes("ISO-8859-1"), "UTF-8");
		String goods1 = new String(request.getParameter("goods1").getBytes("ISO-8859-1"), "UTF-8");
		String quantity1 = new String(request.getParameter("quantity1").getBytes("ISO-8859-1"), "UTF-8");
		String unit1 = new String(request.getParameter("unit1").getBytes("ISO-8859-1"), "UTF-8");
		String price1 = new String(request.getParameter("price1").getBytes("ISO-8859-1"), "UTF-8");
		String subtotal = new String(request.getParameter("subtotal").getBytes("ISO-8859-1"), "UTF-8");
		String tax = new String(request.getParameter("tax").getBytes("ISO-8859-1"), "UTF-8");
		String total = new String(request.getParameter("total").getBytes("ISO-8859-1"), "UTF-8");
		String note = new String(request.getParameter("note").getBytes("ISO-8859-1"), "UTF-8");
		
		HttpSession session = request.getSession();
		session.setAttribute("company_name", company_name);
		session.setAttribute("zip_code", zip_code);
		session.setAttribute("address", address);
		session.setAttribute("address2", address2);
		session.setAttribute("department", department);
		session.setAttribute("charge", charge);
		session.setAttribute("person_name", person_name);
		session.setAttribute("order", order);
		session.setAttribute("issue", issue);
		session.setAttribute("item", item);
		session.setAttribute("goods1", goods1);
		session.setAttribute("quantity1", quantity1);
		session.setAttribute("unit1", unit1);
		session.setAttribute("price1", price1);
		session.setAttribute("subtotal", subtotal);
		session.setAttribute("tax", tax);
		session.setAttribute("total", total);
		session.setAttribute("note", note);
		
		// 納品書
		if(!request.getParameter("nouhin").isEmpty()) {
			response.sendRedirect(SSCORE.PDF_NOUHIN_SERVLET);
		}
		// 請求書
		else if(!request.getParameter("seikyu").isEmpty()) {
			response.sendRedirect(SSCORE.PDF_NOUHIN_SERVLET);
		} 
		// 受領書
		else if(!request.getParameter("juryou").isEmpty()) {
			response.sendRedirect(SSCORE.PDF_NOUHIN_SERVLET);
		}
		
	}

}
