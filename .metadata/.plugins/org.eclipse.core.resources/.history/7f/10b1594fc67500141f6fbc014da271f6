package jp.ac.hal.cenka;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public class Dao {
	// コネクション
		private Connection con;
		
		/**
		 * インスタンス生成と同時にコネクションを取得する
		 * @throws NamingException
		 * @throws SQLException
		 */
		public Dao() throws NamingException, SQLException{
			// JNDI DataSource lookup
			InitialContext context = new InitialContext();
			DataSource datasourse = (DataSource) context.lookup("java:comp/env/jdbc/kadai08");
			// get Connection with DB
			con = datasourse.getConnection();
		}
		
		
		/**
		 * 言語に関するデータを全件取得する
		 * 
		 * @return 言語データ一覧
		 * @throws SQLException 
		 */
		public ArrayList<BillsBeans> findAll() throws SQLException {
			PreparedStatement select = con.prepareStatement("select * from language");
			ResultSet res = select.executeQuery();
			ArrayList<BillsBeans> billsArray = new ArrayList<BillsBeans>();
			
			while(res.next()) {
				// beans インスタンス化
				BillsBeans billsBeans = new BillsBeans();
				billsBeans.setBill_id(res.getInt("bill_id"));
				billsBeans.setName(res.getString("name"));
				billsBeans.setTerm(res.getString("term"));
				billsBeans.setPlace(res.getString("place"));
				billsBeans.setSystem(res.getString("system"));
				billsBeans.setAvailable(res.getString("available"));
				billsBeans.setCharge(res.getString("charge"));
				billsBeans.setTel(res.getInt("tel"));
				billsBeans.setFax(res.getInt("fax"));
				
				// 配列へ格納
				billsArray.add(billsBeans);
			}
			return billsArray;
		}
		
		
		/**
		 * 主キーで１件検索します
		 * 
		 * @param languageId
		 * @return
		 */
		public BillsBeans findByLanguageId(int languageId) {
			
			return null;
		}
		
		
		/**
		 * コネクションのクローズ処理
		 * 
		 * @throws SQLException
		 */
		public void close() throws SQLException{
			try {
				con.close();
			} catch (SQLException e) {
				con = null;
				throw e;
			}
		}
		
		/**
		 * コネクションのロールバック処理
		 * 
		 * @throws SQLException
		 */
		public void rollback() throws SQLException {
			try {
				con.rollback();
			} catch (SQLException e) {
				con = null;
				throw e;
			}
		}
		
		/**
		 * 新しいデータを追加します
		 * 
		 * @param newRecoad
		 * @return 更新された行数
		 * @throws SQLException 
		 */
//		public int create(BillsBeans newRecoad) {
//			try{
//				PreparedStatement prepared = con.prepareStatement(
//						"insert into language(language_id, name, last_update) values (null,?,?)");
//				prepared.setString(1, newRecoad.getName());
//				prepared.setString(2, newRecoad.getDate());
//				int res = prepared.executeUpdate();
//				con.commit();
//				return res;
//			} catch(SQLException e) {
//				try {
//					rollback();
//				} catch (SQLException e1) {
//					// TODO Auto-generated catch block
//					e1.printStackTrace();
//				}
//				return 0;
//			}
//		}
		
		/**
		 * データを更新します
		 * 
		 * @param newRecoad
		 * @return 更新された行数
		 */
		public int update(BillsBeans newRecoad) {
			try{
				PreparedStatement prepared = con.prepareStatement(
						"update language set name = ?, last_update = ?  where language_id = ?");
				prepared.setString(1, newRecoad.getName());
				prepared.setString(2, newRecoad.getDate());
				prepared.setInt(3, newRecoad.getId());
				int res = prepared.executeUpdate();
				con.commit();
				return res;
			} catch(SQLException e) {
				System.out.println(e.getMessage());
				try {
					rollback();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				return 0;
			}
		}
		
		/**
		 * 指定されたデータを削除します
		 * 
		 * @param newRecoad
		 * @return 更新された行数
		 */
		public int delete(BillsBeans newRecoad) {
			try{
				PreparedStatement prepared = con.prepareStatement(
						"delete from language where language_id = ?");
				prepared.setInt(1, newRecoad.getId());
				int res = prepared.executeUpdate();
				con.commit();
				return res;
			} catch(SQLException e) {
				try {
					rollback();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				return 0;
			}
		}
}
